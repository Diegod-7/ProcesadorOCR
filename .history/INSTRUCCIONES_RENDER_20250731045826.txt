INSTRUCCIONES PARA SOLUCIONAR SYSTEM.DRAWING EN RENDER
========================================================

PROBLEMA:
System.Drawing.Common is not supported on this platform

SOLUCIÓN:
Configurar variables de entorno y reconstruir el servicio

PASOS:

1. VARIABLES DE ENTORNO EN RENDER
=================================
Ve a tu dashboard de Render y agrega estas variables de entorno al servicio:

DOTNET_SYSTEM_DRAWING_ENABLE_UNSAFE_CODE=1
DOTNET_SYSTEM_DRAWING_ENABLE_LINUX_NATIVE=1
ASPNETCORE_ENVIRONMENT=Production
ASPNETCORE_URLS=http://+:80

2. CONFIGURACIÓN DEL SERVICIO
=============================
En tu servicio de Render, verifica que:

Build Command: docker build -t procesador-ocr .
Start Command: docker run -p $PORT:80 procesador-ocr

O si usas Docker Compose:
Build Command: docker-compose build
Start Command: docker-compose up

3. RECONSTRUIR EL SERVICIO
==========================
1. Ve a tu servicio en Render
2. Haz clic en "Manual Deploy"
3. Selecciona "Clear build cache & deploy"
4. Espera a que termine el despliegue

4. VERIFICACIÓN
===============
Después del despliegue, revisa los logs en Render:

- Deberías ver: "Iniciando aplicación Carnet Aduanero Processor"
- NO deberías ver: "System.Drawing.Common is not supported"

5. PRUEBA LA API
================
1. Ve a la URL de tu servicio en Render
2. Deberías ver Swagger UI
3. Prueba subir un archivo PNG desde Swagger
4. Debería procesar sin errores de System.Drawing

6. ARCHIVOS NECESARIOS
======================
Asegúrate de que estos archivos estén en tu repositorio:

- Dockerfile (con las dependencias de System.Drawing)
- docker-compose.yml (con las variables de entorno)
- .dockerignore
- appsettings.Docker.json

7. DEPENDENCIAS INSTALADAS EN DOCKERFILE
========================================
El Dockerfile debe incluir:

RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-spa \
    tesseract-ocr-eng \
    libgdiplus \
    libc6-dev \
    libgif-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    && rm -rf /var/lib/apt/lists/*

8. VARIABLES DE ENTORNO EN DOCKERFILE
=====================================
El Dockerfile debe incluir:

ENV DOTNET_SYSTEM_DRAWING_ENABLE_UNSAFE_CODE=1
ENV DOTNET_SYSTEM_DRAWING_ENABLE_LINUX_NATIVE=1

9. COMANDOS DE VERIFICACIÓN (SI TIENES ACCESO SSH)
==================================================
# Verificar variables de entorno
echo $DOTNET_SYSTEM_DRAWING_ENABLE_UNSAFE_CODE
echo $DOTNET_SYSTEM_DRAWING_ENABLE_LINUX_NATIVE

# Verificar que las dependencias están instaladas
docker exec -it <container_id> apt list --installed | grep libpng

# Ver logs del contenedor
docker logs <container_id>

10. TROUBLESHOOTING
===================
Si sigue fallando:

1. Verifica que las variables de entorno están configuradas
2. Asegúrate de que el Dockerfile tiene las dependencias correctas
3. Revisa los logs de build en Render
4. Intenta un "Clear build cache & deploy"

11. RESULTADO ESPERADO
======================
Después de aplicar estos cambios:

✅ API funcionando en la URL de Render
✅ Swagger UI disponible
✅ OCR con Tesseract funcionando
✅ Azure Computer Vision configurado
✅ System.Drawing habilitado para Linux
✅ Procesamiento de archivos PNG/PDF exitoso

12. CONTACTO
============
Si necesitas más ayuda, revisa:
- Logs de Render
- Documentación de System.Drawing en Linux
- Archivo DOCKERIZACION_COMPLETADA.md

¡El Procesador OCR debería funcionar perfectamente en Render después de estos cambios! 